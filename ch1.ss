#lang scheme

(define atom?
  (lambda (x)
    (and (not (pair? x)) (not (null? x)))))

(atom? 'atom)
(atom? 'turkey)
(atom? 1492)
(atom? 'u)
(atom? '*abc$)
(atom? '(atom))
(atom? '(atom turkey or))
(atom? '((atom turkey) or))
(atom? '())
(atom? '(() () () ()))
(car '(a b c))
(car '((a b c) x y z))
(car '(((hotdogs)) (and) (pickle) relish))
(let ([l '(((hotdogs)) (and))]) (car (car l)))
(let ([l '(a b c)]) (cdr l))
(let ([l '((a b c) x y z)]) (cdr l))
(let ([l '(hamburger)]) (cdr l))
(let ([l '((x) t r)]) (cdr l))
;(let ([a 'hotdogs]) (cdr a))
;(let ([l '()]) (cdr l))
(let ([l '((b) (x y) ((c)))]) (car (cdr l)))
(let ([l '((b) (x y) ((c)))]) (cdr (cdr l)))
;(let ([l '(a (b (c)) d)]) (cdr (car l)))
(let ([a 'peanut][l '(butter and jelly)]) (cons a l))
(let ([s '(banana and)][l '(peanut butter and jelly)]) (cons s l))
(let ([s '((help) this)][l '(is very ((hard) to learn))]) (cons s l))
(let ([s '(a b (c))][l '()]) (cons s l))
(let ([s 'a][l '()]) (cons s l))
(let ([s 'a][l '((b) c d)]) (cons s (car l)))
(let ([s 'a][l '((b) c d)]) (cons s (cdr l)))
(null? '())
(null? (quote ()))
(let ([l '(a b c)]) (null? l))
(let ([a 'spagetti]) (null? a))
(atom? 'Henry)
(let ([s '(Harry had a heap of apples)]) (atom? s))
(let ([l '(Harry had a heap of apples)]) (atom? (car l)))
(let ([l '(Harry had a heap of apples)]) (atom? (cdr l)))
(let ([l '(Harry)]) (atom? (cdr l)))
(let ([l '(swing low sweet cherry oat)]) (atom? (car (cdr l)))) ;t
(let ([l '(swing (low sweet) cherry oat)]) (atom? (car (cdr l)))) ;f

(let ([a1 'Harry][a2 'Harry]) (eq? a1 a2))
(let ([a1 'margarine][a2 'butter]) (eq? a1 a2))
(let ([l1 '()][l2 '(strawberry)]) (eq? l1 l2))
(let ([n1 6][n2 7]) (eq? n1 n2))

(let ([a 'Mary][l '(Mary had a little lamb chop)]) (eq? (car l) a))
(let ([a 'milk][l '(soured milk)]) (eq? (cdr l) a))
(let ([l '(beans beans we need jelly beans)]) (eq? (car l) (car (cdr l))))